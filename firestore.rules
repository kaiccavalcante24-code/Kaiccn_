/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and links,
 * database-based access control (DBAC) for administrative privileges, and allows public
 * creation of click events while restricting read access to administrators only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/links/{linkId}: Stores links owned by a specific user, continuing the
 *   user-ownership model.
 * - /click_events/{clickEventId}: Stores click events, publicly creatable, readable only by admins.
 * - /roles_admin/{userId}: Used for DBAC; the presence of a document grants admin privileges.
 * - /admin/traffic_reports/{reportId}: stores aggregate data related to traffic reports. Admin only
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the structure.
 * - Administrative privileges are granted via DBAC, by checking for the existence of a document
 *   in the /roles_admin/{userId} collection.
 * - Click event creation is public to facilitate traffic tracking, but read access is restricted
 *   to admins for reporting purposes.
 * - All write operations require authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data only to the user themselves.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if request.auth.uid == userId
     * @deny (get, create, update, delete, list): if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the profile, also check if the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to links data only to the user themselves.
     * @path /users/{userId}/links/{linkId}
     * @allow (get, create, update, delete, list): if request.auth.uid == userId
     * @deny (get, create, update, delete, list): if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/links/{linkId} {
      // Helper function to check if the user is signed in and owns the profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in and owns the profile, also check if the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to create click events, but restricts reading to admins only.
     * @path /click_events/{clickEventId}
     * @allow create: if request.auth != null
     * @allow get, list: if isAdmin()
     * @deny update, delete: if true
     * @principle Allows public creation of click events for traffic tracking, while restricting
     *            read access to administrators for reporting.
     */
    match /click_events/{clickEventId} {
      // Helper function to determine if a user has admin privileges via DBAC.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls administrative access using DBAC.  The existence of a document
     *              in this collection grants admin rights to the corresponding user.
     * @path /roles_admin/{userId}
     * @allow get, create, update, delete, list: if request.auth.uid == userId
     * @deny get, create, update, delete, list: if request.auth.uid != userId
     * @principle Implements Database-Based Access Control (DBAC) for admin privileges.
     */
    match /roles_admin/{userId} {
      // Helper function to check if the user is signed in and owns the profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of admin roles.
      allow create: if isOwner(userId);
      allow update: if false; // Admin roles should not be updated; delete and recreate.
      allow delete: if isOwner(userId);
    }

     /**
      * @description Grants access to traffic reports data only to admins.
      * @path /admin/traffic_reports/{reportId}
      */
     match /admin/traffic_reports/{reportId} {
      // Helper function to determine if a user has admin privileges via DBAC.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}