/**
 * @fileoverview Firestore Security Rules for the LinkBio application.
 *
 * Core Philosophy:
 * This ruleset employs a strict, path-based ownership model for user data and utilizes Database-Based Access Control (DBAC) for administrative privileges.  All writes are carefully guarded by authorization checks to prevent unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/links/{linkId}: Stores links owned by a specific user, inheriting ownership from the parent /users/{userId} collection.
 * - /click_events/{clickEventId}: Stores click events, which are publicly creatable but readable only by admins.
 * - /roles_admin/{userId}:  The *existence* of a document in this collection grants admin privileges to the corresponding user.
 * - /admin/traffic_reports/{reportId}: Stores aggregate data related to traffic reports. This is admin only.
 *
 * Key Security Decisions:
 * - User data (profiles and links) is strictly owned and controlled by the individual user, enforced through path-based rules.
 * - Listing of user documents or links by non-owners is disallowed.
 * - Click event creation is public to allow for anonymous tracking.
 * - Administrative privileges are granted via DBAC, checking for the existence of a document in the /roles_admin/{userId} collection.
 *
 * Denormalization for Authorization:
 * -  To avoid `get()` calls, ownership is enforced using path-based rules (e.g., /users/{userId}/...).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can update/delete their own profile.
     * @deny (create) - An unauthenticated user can't create a profile.
     * @deny (update, delete) - An unauthenticated user can't update/delete a profile.
     * @deny (get, list) - An unauthenticated user can't read profile
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to link documents associated with a user profile.
     * @path /users/{userId}/links/{linkId}
     * @allow (create) - Authenticated user can create links under their own profile.
     * @allow (get, list) - Authenticated user can read links under their own profile.
     * @allow (update, delete) - Authenticated user can update/delete links under their own profile.
     * @deny (create) - An unauthenticated user can't create a link.
     * @deny (update, delete) - An unauthenticated user can't update/delete a link.
     * @deny (get, list) - An unauthenticated user can't read links under other profiles
     * @principle Enforces document ownership for all operations, inheriting from the parent /users/{userId} path.
     */
    match /users/{userId}/links/{linkId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to click event documents.
     * @path /click_events/{clickEventId}
     * @allow (create) - Any user (authenticated or not) can create click events.
     * @allow (get, list) - Only admin users can read click events.
     * @deny (update, delete) - No one can update or delete click events.
     * @principle Allows public creation of click events, restricts reading to admins.
     */
    match /click_events/{clickEventId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to admin role documents. The *existence* of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Only a user with existing admin privileges can grant new admin roles.
     * @allow (get) - Any admin user can check for the existence of another admin document
     * @allow (delete) - Only a user with existing admin privileges can revoke admin roles.
     * @deny (list, update) - Listing and updating the `/roles_admin` collection is forbidden.
     * @principle Uses DBAC (Database-Based Access Control) for managing admin privileges.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

        /**
     * @description Controls access to traffic report documents. Only admin users can access this data.
     * @path /admin/traffic_reports/{reportId}
     * @allow (get, list) - Only admin users can read traffic reports.
     * @deny (create, update, delete) - No one can create, update, or delete traffic reports except through backend services.
     * @principle Restricts all access to traffic reports to admin users.
     */
    match /admin/traffic_reports/{reportId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}