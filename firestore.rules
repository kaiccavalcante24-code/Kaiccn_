/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset enforces a strict, role-based access control model.
 *   - Path-based ownership for user data.
 *   - Database-based access control (DBAC) for admin privileges.
 *
 * @data_structure
 *   - /users/{userId}: User profile data, accessible only by the user themselves.
 *   - /users/{userId}/links/{linkId}: Links associated with a user, accessible only by the user.
 *   - /click_events/{clickEventId}: Click event data, publicly creatable, but readable only by admins.
 *   - /roles_admin/{userId}: The *existence* of a document here grants admin privileges to {userId}.  No data is stored in the document.
 *   - /admin/traffic_reports/{reportId}: Traffic reports, accessible only by admins.
 *
 * @key_security_decisions
 *   - No user listing is allowed (to prevent data scraping).
 *   - Admin privileges are managed through the `/roles_admin/{userId}` collection using DBAC.
 *   - Data required for authorization decisions is denormalized where necessary to avoid `get()` calls and maintain authorization independence.
 *   - The rules do not implement schema validation in this prototyping phase.
 *
 * @denormalization_for_authorization
 *   - Ownership is enforced through path-based rules (e.g., `/users/{userId}`). The `userId` is implicitly the owner.
 *   - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection, avoiding the need to store roles within user documents.
 *
 * @structural_segregation
 *   - Publicly creatable click events are stored in the `/click_events` collection, separate from user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource, based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner and that the resource exists
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'EDNCOeodryay8jlinsWn15ZFfA43' can create their own profile.
     * @allow (get, update, delete) - User 'EDNCOeodryay8jlinsWn15ZFfA43' can read, update, or delete their own profile.
     * @deny (create, update, delete) - User 'NOT_OWNER' cannot create, update, or delete user profile 'EDNCOeodryay8jlinsWn15ZFfA43'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for links associated with a user.
     * @path /users/{userId}/links/{linkId}
     * @allow (create) - User 'EDNCOeodryay8jlinsWn15ZFfA43' can create links under their profile.
     * @allow (get, update, delete) - User 'EDNCOeodryay8jlinsWn15ZFfA43' can read, update, or delete their own links.
     * @deny (create, update, delete) - User 'NOT_OWNER' cannot create, update, or delete links under user profile 'EDNCOeodryay8jlinsWn15ZFfA43'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/links/{linkId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for click events.
     * @path /click_events/{clickEventId}
     * @allow (create) - Any signed-in user can create click events.
     * @allow (get, list) - Only admins can read click events.
     * @deny (update, delete) - Non-admins cannot update or delete click events.
     * @principle Allows public creation but restricts reading to admins.
     */
    match /click_events/{clickEventId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Rules for admin roles (DBAC).
     * @path /roles_admin/{userId}
     * @allow (create) - Only allowed via backend functions.
     * @allow (get) - Anyone can check if a user is an admin by attempting to read their role document.
     * @allow (list) - No listing to prevent discovery of admins
     * @allow (update, delete) - Only allowed via backend functions.
     * @principle Enforces database-based access control for admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn(); // Anyone signed in can check for admin status.
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Rules for traffic reports.
      * @path /admin/traffic_reports/{reportId}
      * @allow (get, list, create, update, delete) - Only admins can read or write traffic reports.
      * @principle Restricts access to traffic reports to admins only.
      */
    match /admin/traffic_reports/{reportId} {
      allow get, list, create, update, delete: if isAdmin();
    }
  }
}