/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of path-based ownership for user data and role-based access control for administrative functions.
 * It prioritizes security by minimizing external reads (`get()` calls) and structurally segregating data based on access requirements.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /users/{userId}/links/{linkId}: Stores links owned by a specific user, accessible only by that user.
 * - /click_events/{clickEventId}: Stores click events, creatable by anyone but only readable by admins.
 * - /roles_admin/{userId}: Used for DBAC. The *existence* of a document grants admin privileges.
 * - /admin/traffic_reports/{reportId}: Stores aggregate traffic data, accessible only by admins.
 *
 * Key Security Decisions:
 * - User data is strictly owned by the user, enforced through path-based rules.
 * - Click event creation is open to facilitate tracking, but reading is restricted to admins.
 * - Admin privileges are managed through the presence of a document in the /roles_admin collection.
 * - List operations are generally restricted except where explicitly allowed (e.g., listing a user's own links).
 *
 * Denormalization for Authorization:
 * - User ownership is encoded in the path for `/users/{userId}` and `/users/{userId}/links/{linkId}`, avoiding the need for `get()` calls to verify ownership.
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`, also avoiding `get()` calls.
 *
 * Structural Segregation:
 * - Publicly creatable click events are stored in a separate collection (`/click_events`) from user-owned data, allowing for different security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile (if userId matches auth.uid).
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile (if userId matches auth.uid).
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) - Any user attempting to modify a different user's profile.
     * @principle Enforces document ownership; users can only access their own profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to link documents within a user's profile.
     * @path /users/{userId}/links/{linkId}
     * @allow (create) - Authenticated user can create a link under their profile.
     * @allow (get, list, update, delete) - Authenticated user can get, list, update, and delete links under their profile.
     * @deny (create, update, delete) - Any user attempting to modify another user's links.
     * @principle Enforces document ownership; users can only access links within their own profile.
     */
    match /users/{userId}/links/{linkId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to click event documents.
     * @path /click_events/{clickEventId}
     * @allow (create) - Anyone can create a click event (no authentication required).
     * @allow (get, list) - Only admins can read click events.
     * @deny (update, delete) - No one can update or delete click events.
     * @principle Allows public creation of click events but restricts reading to admins.
     */
    match /click_events/{clickEventId} {
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

        /**
         * @description Controls access to admin role documents. The *existence* of a document here grants admin privileges.
         * @path /roles_admin/{userId}
         * @allow (create) - Only admins can grant other users admin priveleges.
         * @allow (get) - Admins can check their own status
         * @deny (list, update, delete) - Listing, updating, or deleting role assignments is not allowed through this path.
         * @principle DBAC implementation, the existance of this document confers admin status
         */
        match /roles_admin/{userId} {
            function isAdmin() {
                return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
            }

            allow get: if isAdmin() && request.auth.uid == userId;
            allow list: if false;
            allow create: if isAdmin();
            allow update: if false;
            allow delete: if false;
        }

    /**
     * @description Controls access to traffic report documents.
     * @path /admin/traffic_reports/{reportId}
     * @allow (get, list, create, update, delete) - Only admins can access traffic reports.
     * @principle Restricts access to traffic reports to admins only.
     */
    match /admin/traffic_reports/{reportId} {
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}